TCS - CKA


*************************
Day - 1 | 25th Nov. 2025 
*************************


	Introduction to Kubernetes 
	
	Lab Environment - AWS Free Tier Account
		- https://aws.amazon.com/console/
		
		- Create Free Tier Account 
		
			- 12 Months 
			
			- Active Email_ID 
			- Active Mobile Number 
			- Active Credit/Debit Card 
	
	GITHUB Account 	- Manage the Application Source Code / Training Documents
		- https://github.com/
	
	DockerHub Account - Manage the Application Container Images 
	
		- https://hub.docker.com/
		
	

Topics :
	
	- What is Kubernetes ?
	
	- Kubernetes Architecture 
	
	- Kubernetes Architecture Components 
	
	- Kubernetes Concepts and Terminologies
	
	- Kubernetes Controller Objects 
	
	- Kubernetes Services 
	
	- Volumes 
	
	- Security
	
	- Monitoring 
	
	- Trouble shooting
	
	
	- What is Kubernetes ?
	
		- Is a Open Source  Container Orchestration Tool
		
		
		Application Architecture :
		
			- Monolith Application Architecture
			
			- Micro-Service Based Application Architecture 
				
				
				- Java Spring-boot Application 
				
					target/mywebapp.war 
					
					Dev Environment:		- tomcat_8, jdk11	- mywebapp.war 
					
					QA Environment			- tomcat_10, jdk17	- mywebapp.war 
					
					UAT Environment			- tomcat_10, jdk17	- mywebapp.war
					
					PROD Environment		- tomcat_10, jdk17	- mywebapp.war
						10 Prod Servers 
						
							50000 users can access my application in parallel
					
					
				- Containerization :
					- Is a process of packaging the Application Service along with its dependencies
					
					
					Dev Environment(VM) :	Package - (mywebapp.war,tomcat_8, jdk11) - mywebapp_img:v1.0
											Publish mywebapp_img:v1.0 to DockerHub
					
					
					QA Environment(VM)  : 	Package - (mywebapp.war,tomcat_8, jdk11) - mywebapp_img:v1.0 run as a container
		
					UAT Environment(VM)  : 	Package - (mywebapp.war,tomcat_8, jdk11) - mywebapp_img:v1.0 run as a container
					
					PROD Environment(VM)  : Package - (mywebapp.war,tomcat_8, jdk11) - mywebapp_img:v1.0 run as a container
					
					
					Container Engine called Docker.
					
						- Create Container Images 
					
						- Publish the Container Images to Container Registry (DockerHub)
						
					Kubernetes - Container Orchestration Tool :::
					
						- Kubernetes Is a Open Source  Container Orchestration Tool
						- It create the replications of pods 
						- Perform Auto-Scaling 
						- Perform Load Balancing 
						- Self-Healing 
						- Support all types of Container 
						
						
						10 Servers -->  10000 Users 
										50000 Users 
										Scale-up the Servers 
										Scale-Down 
						
						10 Servers	--> Desired State 
						
						
					Other Container Orchestration Tools :
					
						Docker Swarm 	# It is used only for Docker Container.
										# Cannot perform Auto-Scaling / Load Balancing 
										
										
						Managed Services :
						
							AWS 	-> ECS,ECR,EKS
							
							Azure 	-> ACS,ACR,AKS
							
							GCP 	-> GCE,GCR,GKE
							
					
	Kubernetes Terminologies :

		- Container Images 		# Is a static file, that defines the properties of Application and its dependencies
								# Is Non-Executable
								# Composed of various layer create using Dockerfile Instructions 
		
		- Containers			# Containers are the executable units of Container Images

		- Container Engine		# is used to Manage the Containers
		
		- Container Registries 	# Is used to save and manage the Container Images 
								# Dockerhub 
								# Container Repository 
									- It is sub-set of Container Registries
		
		- Pods					# The smallest/Atomic unit of Schedule  
		
		- kubectl 				# It a Command Line Utility to interact with Kubernetes 
		
		- kubeadm 				# Is a Command Line Utility used to Administrate the Kubernetes Cluster 
		
		- Kubernetes Cluster 	# Collection of WorkNodes. 
		
		
		
		Kubernetes Architecture :
		
			- Client and Server Architecture
			
			- Kubernetes_Master 
			
				Kubernetes Cluser 
					- Kubernetes WorkNode1(VM)
					- Kubernetes WorkNode2(VM)
					- Kubernetes WorkNode3(VM)
					
					
Next : 
					
		Kubernetes Architecture
		
		Kubernetes Architecture Components 
					
*************************
Day - 2 | 27th Nov. 2025 
*************************

	Kubernetes Architecture
	
	Kubernetes Architecture Components 
	
	Kubernetes Core Concepts 
	
	- ***Installation and Configurations of Kubernetes Architecture
	
	
	Environments ::
	
	
	Non-Prod													Production Environment
	
		Dev Environment(VM)
		
		Build Environment(VM)
		
		Test Environments 
		
			QA(VM) 
			
			UAT(VM) 						============>				Production Servers(VM)
																			Prod Server1,2,3,4,5
	
	

	Kubernetes Architecture	: Based on Master and WorkerNodes
	
		Kubernetes_Master 
			Kubernetes WorkerNode1
			Kubernetes WorkerNode2
			Kubernetes WorkerNode3
			Kubernetes WorkerNode4
			Kubernetes WorkerNode5
	
	
	
	VM in AWS Clound -> 
	
		Instance Type -> 1 CPU & 1GB RAM 
		
						 2 CPUs & 4 GB RAM		WN1 --> 10 Pods -> 500MB 
						 
						 80% CPU/RAM 
						 
						 
	Kubernetes Architecture Components ::

		- API Server 
		
		- ETCD 
		
		- Scheduler
		
		- Controller Manager 
		
		
		- Kubelet 
		
		- Kube-Proxy 
		
		- CRI - Container Runtime Interface 
				Container-D 
						 
		
		- Kubectl 		# Command Line Utility to interact with Kubernetes
		
		
		- Pods 			# The smallest/Atomic unit of Schedule  
		
		
		3 - Tier Application :	Micro-Service1 --> User Login Server 
		
			- Front-End Layer 			
			- Application Layer 
			- Back-End DataBase Layer
			
	
	
		Pod Creation:
		
			- Create Manifest File --> 
			
				*.yaml 	File Format -==> Key:Value Pairs
				
				
		Kubernetes Installation Process :
		
			- https://kubernetes.io/docs/setup/
			
			- kubeadm 			# Command line utility to setup and configure Kubernetes
		

			- Kubernetes_Master(VM)							On-Prem
			
				- Kubernetes_Master1(VM)					AWS 
				
					Kubernetes Cluser1 						Region1
						- Kubernetes WorkNode1(VM)
						- Kubernetes WorkNode2(VM)
						- Kubernetes WorkNode3(VM)
						
					Kubernetes Cluser2						Region2
						- Kubernetes WorkNode1(VM)
						- Kubernetes WorkNode2(VM)
						- Kubernetes WorkNode3(VM)

					Kubernetes Cluser2						Region3
						- Kubernetes WorkNode1(VM)
						- Kubernetes WorkNode2(VM)
						- Kubernetes WorkNode3(VM)
						
				- Kubernetes_Master1(VM)					AZURE 
				
					Kubernetes Cluser1 						Region1
						- Kubernetes WorkNode1(VM)
						- Kubernetes WorkNode2(VM)
						- Kubernetes WorkNode3(VM)
						
					Kubernetes Cluser2						Region2
						- Kubernetes WorkNode1(VM)
						- Kubernetes WorkNode2(VM)
						- Kubernetes WorkNode3(VM)

					Kubernetes Cluser2						Region3
						- Kubernetes WorkNode1(VM)
						- Kubernetes WorkNode2(VM)
						- Kubernetes WorkNode3(VM)
						
Next :::
						
	Demo :
	
		- Kubernetes_Master1(VM)					AWS 
		
			Kubernetes Cluser1 						Region1
				- Kubernetes WorkNode1(VM)
				- Kubernetes WorkNode2(VM)
				
	
	Concepts :
	
		- Pod 
		
		- Controller Objects 
			- Replication Controller 
			- Replicasets 
			- DaemonSet 
			- Deployments 
			- StatefulSets
			
		- Services 
			- NodePort
			- ClusterIP 
			- LoadBalancer 
				- Ingress Controller 
			
		- Volumes 
			- EmptyDir 
			- HostPath 
			- ConfigMap
			- Secret 
			- Persistant Volume
			- Persistant Volume Claim
			
		- Monitoring 
		
		- Security 
		
		- Trouble shooting
		
		- Helm Package Manager for Kubernetes


						
				
************************
Day - 3 | 2nd Dec. 2025 
************************

	Demo :
	
		- Kubernetes_Master1(VM)	
				- Kubernetes WorkNode1(VM)
				- Kubernetes WorkNode2(VM)
				
				
				1 VM EC2 Instance 	==> 750 Hrs / Month 
				
				10 VMs				==> 75 Hrs / Months
				
				
	
		- Launch EC2 Instances 
		
		- Connect to Nodes using SSH 
			SSH Agent - Putty / MobaXterm		https://mobaxterm.mobatek.net/download.html
												https://mobaxterm.mobatek.net/download-home-edition.html
			
			- Host Name
			- User Name 
			- User Credentials 
				- Password 
				- Keys 
				
				
				
		NodePort to expose pod to internet

		
************************
Day - 4 | 4th Dec. 2025 
************************

	- Pod 
		
	- Controller Objects 			# To ensure high availability of pods 
		- Replication Controller 
		- Replicasets 
		- DaemonSet 
		- Deployments
			
			
		webapplnsvc.war		===> 	webapplnsvcImg:v1.0			==> Published to Container Registry
		
		pod1 - webapplnsvcImg:v1.0		-> WN1
		pod2 - webapplnsvcImg:v1.0		-> WN2
		pod3 - webapplnsvcImg:v1.0		-> WN2
			
	- Replication Controller & Replicasets :::
		
			- Both RC & RS are used to create replicas of pods.
			- Both RC & RS are used to deploy specific no. of pod instance.
				Eg.: Replica = 5 
			
			- RS is updated version of RC 
			
			- RC uses the Equality based Operator 
				
				envi = qa 
			
			
			- RS used the Set Based Operator
			
				envi : {QA1,UA2,QA3)
				
			- Scale-Up or Scale-Down the pod instances 
			
		webapplnsvc.war		===> 	webapplnsvcImg:v1.0			==> Published to Container Registry
		
		replicas = 3 
		pod1 - webapplnsvcImg:v1.0		-> WN1
		pod2 - webapplnsvcImg:v1.0		-> WN2
		pod3 - webapplnsvcImg:v1.0		-> WN2			
		
		100 users accessing my application at the same time
		
		1000 users ?
			
			replicas = 30
			
	- DaemonSet :

		Replicaset : to deploy the specific no. of pod instance
		
		DaemonSet  : to deploy a copy of pods in all the available workernodes
		
			Pod1
		
			->  KMaster					
					KWN1	Pod1
					KWN2	Pod1
					KWN3	Pod1
		
	
	Deployments :
		Replicatsets 
			Pods 
			
		- Create Replicas of Pods using Replicaset
		- Scale-Up the Pod Instances
		- Scale-Down the Pod Instances
		- Upgrade 
		- Downgrade / Rollback
		
		- Upgrade and Rollback can be done without any downtime.
		
		- Deployment Strategy : Rolling Update Strategy
		
		
		webapplnsvc.war_SNAPSHOT_V1.0		===> 	webapplnsvcImg:v1.0			==> Published to Container Registry
		
		replicas = 3 
		
		pod1 - webapplnsvcImg:v1.0
		pod2 - webapplnsvcImg:v1.0
		pod3 - webapplnsvcImg:v1.0	
		
		
		webapplnsvc.war_SNAPSHOT_V2.0		===> 	webapplnsvcImg:v2.0			==> Published to Container Registry

		replicas = 3 
		
		pod1 - webapplnsvcImg:v1.0			===> 	webapplnsvcImg:v2.0
		pod2 - webapplnsvcImg:v1.0			===> 	webapplnsvcImg:v2.0
		pod3 - webapplnsvcImg:v1.0			===> 	webapplnsvcImg:v2.0		
	
	
	Volumes :
	
		Container Volumes :
		
			- Used to maintain the Persistant Data 
			
			
			Stateless Application
			
			Stateful Application 
			
			
		emptyDir 				# Is the Default Volume 
		
		ConfigMap 
		
		Secret 
		
		Persistant Volume 
		
		Persistant Volume Claim 
